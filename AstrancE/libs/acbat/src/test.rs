use std::{io::Read, ops::Deref, process::Command};

use env::current_dir;

// TODO: test other architectures
use super::*;

const ELF_FILES: [&str; 2] = [
    "./testcases/target/release/00hello",
    "./testcases/target/release/01fib",
];

const LINKER_SCRIPT_CONTENTS: &str = r#"// this file is auto generated by acbat
.align 8
    .section .data
    .global _num_app
_num_app:
    .quad 2
    .quad app_00_start
    .quad app_01_start
    .quad app_01_end

    .section .data
    .global app_00_start
    .global app_00_end
app_00_start:
    .incbin "release/00hello"
app_00_end:

    .section .data
    .global app_01_start
    .global app_01_end
app_01_start:
    .incbin "release/01fib"
app_01_end:
"#;

/// remove fisrt line of linker script(the auto generation statement)
fn build_test() {
    Command::new("cargo")
        .current_dir("./testcases")
        .arg("build")
        .arg("--release")
        //.arg("--target=riscv64gc-unknown-none-elf")
        .status()
        .expect("Failed to execute cargo build");
}
fn gen_ld(mut builder: BatBuilder) -> String {
    build_test();
    let linker_script_path = "./testcases/target/link.ld";
    let mut paths = Vec::new();
    for elf in ELF_FILES {
        let path = Path::new(elf);
        paths.push(path);
    }

    builder
        .add_elfs(paths.as_slice())
        .generate_link_script(linker_script_path);

    let mut linker_script = File::open(linker_script_path).unwrap();

    let mut contents = String::new();
    linker_script.read_to_string(&mut contents).unwrap();

    contents
}
#[test]
fn test_gen_elf() {
    let mut builder = BatBuilder::default();
    let builder = builder.with_hash(false);
    let content = gen_ld(builder.clone());
    assert_eq!(content, LINKER_SCRIPT_CONTENTS, "should equal");
}

const CONTENT_WITH_HASH: &str = r#"// this file is auto generated by acbat
.align 8
    .section .data
    .global _num_app
_num_app:
    .quad 2
    .quad app_008f1b12cf_start
    .quad app_014e2d26b6_start
    .quad app_014e2d26b6_end

    .section .data
    .global app_008f1b12cf_start
    .global app_008f1b12cf_end
app_008f1b12cf_start:
    .incbin "release/00hello"
app_008f1b12cf_end:

    .section .data
    .global app_014e2d26b6_start
    .global app_014e2d26b6_end
app_014e2d26b6_start:
    .incbin "release/01fib"
app_014e2d26b6_end:
"#;
#[test]
fn test_hash() {
    println!("111:{:?}", env::current_dir().unwrap());
    let builder = BatBuilder::default();
    let content = gen_ld(builder);
    assert_eq!(content, CONTENT_WITH_HASH, "should equal");
}

#[test]
fn file_not_found() {
    let elf_paths = vec![
        Path::new("./testcases/target/release/00hello"),
        Path::new("./testcases/target/release/01fib"),
        Path::new("./testcases/target/release/02not_found"),
    ];
    let res = std::panic::catch_unwind(|| {
        let builder = BatBuilder::from_elfs(elf_paths.as_slice());
        let linker_script_path = Path::new("./testcases/target/link.ld");
        builder.generate_link_script(linker_script_path);
    });
    if res.is_ok() {
        panic!("Should have panicked");
    }
}
