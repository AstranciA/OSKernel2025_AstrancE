use std::fs::File;
use std::path::PathBuf;
use std::{env, process::Command};
use std::io::{Result as IoResult, Write};
use toml_edit::{DocumentMut, Item, Table};

use acbat::BatBuilder;

const TESTCASES: [&str; 2] = [
    //"../../testcases/nimbos/build/x86_64/test_hello_world"
    //"../../testcases/simple/build/riscv64/hello",
    "testcases/nimbos/build/riscv64/hello_world",
    "testcases/nimbos/build/riscv64/getpid",
    //"../../testcases/nimbos/build/riscv64/nothing",
];
const LINKER_FILE: &str = "./link_apps.S";

fn main() {
    let arch = env::var("CARGO_CFG_TARGET_ARCH").unwrap();
    //gen_kernel_config(arch.as_str()).unwrap();
    /*
     *println!("cargo:rerun-if-changed=../../testcases/simple");
     *let status = Command::new("make").current_dir("../../testcases/simple").args(&[
     *    "ARCH=riscv64",
     *    "build"
     *]).status();
     *assert!(status.unwrap().success());
     */
    let mut bat_builer = BatBuilder::default();
    for testcase in TESTCASES {
        println!("cargo:rerun-if-changed={}", testcase);
        bat_builer.add_elf(testcase);
    }



    bat_builer.generate_link_script(LINKER_FILE);
}

fn gen_kernel_config(arch: &str) -> IoResult<()> {
    let config_path = PathBuf::from(format!("configs/{}.toml", arch));
    let config = std::fs::read_to_string(config_path)?;
    let out_path = PathBuf::from(std::env::var("OUT_DIR").unwrap()).join("uspace_config.rs");
    let config_content = config
        .parse::<DocumentMut>()
        .expect("failed to parse config file")
        .as_table()
        .clone();

    fn get_comments<'a>(config: &'a Table, key: &str) -> &'a str {
        config
            .key(key)
            .and_then(|k| k.leaf_decor().prefix())
            .and_then(|s| s.as_str())
            .map(|s| s.trim())
            .unwrap_or_default()
    }

    let mut f = File::create(out_path)?;
    writeln!(f, "// Automatically generated by build.rs\n")?;
    for (key, item) in config_content.iter() {
        let comments = get_comments(&config_content, key).replace('#', "///");
        writeln!(f, "{}", comments)?;
        if let Item::Value(value) = item {
            writeln!(f, "#[allow(dead_code)]")?;
            let key_name = key.to_uppercase().replace('-', "_");
            match value {
                toml_edit::Value::Integer(i) => {
                    writeln!(f, "pub const {}: usize = {};", key_name, i)?;
                }
                toml_edit::Value::String(s) => {
                    writeln!(f, "pub const {}: &str = \"{}\";", key_name, s)?;
                }
                _ => {
                    panic!("Unsupported value type");
                }
            }
        }
    }
    Ok(())
}
